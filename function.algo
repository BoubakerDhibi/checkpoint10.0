FUNCTION dot_product(v1,v2:ARRAY_OF FLOAT) : FLOAT
VAR
    i:INTEGER
    ps:FLOAT
BEGIN
ps:=0
IF(v1.length = v2.length)
FOR i FROM 0 TO v1.length-1 STEP 1  DO
   ps= ps+ v1[i]*v2[i] 
END_FOR
ELSE
ps := -1;
END IF
RETURN ps
END

PROCEDURE read_matrix(n,m:INTEGER , VAR T: ARRAY_OF FLOAT)
VAR
    i,j:INTEGER
BEGIN
    FOR i FROM 0 TO n-1 STEP 1 DO
      FOR j FROM 0 TO m-1 STEP 1  DO
          Read (T[i][j])
      END_FOR
    END_FOR
END

ALGORITHM vector
VAR
     ps:INTEGER
     pairs:ARRAY_OF FLOAT
    m,n,i,:=INTEGER
BEGIN
REPEAT
write ("Enter a pair and greater than 1 length")
Read(n)
UNTIL (n>1 AND n<=50 AND n%2=0)

REPEAT
write ("Enter a positive length")
Read(m)
UNTIL (m>0 AND n<=50 )
read_matrix(n,m,pairs)

    FOR i FROM 0 TO n-1 STEP 2 DO
    ps=dot_product(pairs[i], pairs[i+1])
   IF (ps=-1)THEN
   Write("We could not calculate dot product")
   ELSE IF(ps=0)THEN
   Write (pairs[i], " and", pairs[i+1], " are orthogonal")
   ELSE
   Write(pairs[i], " and", pairs[i+1], " are  not orthogonal")
END IF
END_FOR
END
